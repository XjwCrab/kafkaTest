/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.topsec.portal.kafkaspringboottest;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Tasks extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7770119501633782187L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Tasks\",\"namespace\":\"com.topsec.portal.kafkaspringboottest\",\"fields\":[{\"name\":\"taskId\",\"type\":\"string\"},{\"name\":\"taskName\",\"type\":\"string\"},{\"name\":\"taskFrom\",\"type\":\"string\"},{\"name\":\"taskContent\",\"type\":\"string\"},{\"name\":\"taskType\",\"type\":\"string\"},{\"name\":\"status\",\"type\":\"string\"},{\"name\":\"serviceState\",\"type\":\"string\"},{\"name\":\"messageState\",\"type\":\"string\"},{\"name\":\"time\",\"type\":\"string\"},{\"name\":\"unit\",\"type\":\"string\"},{\"name\":\"promoter\",\"type\":\"string\"},{\"name\":\"handlerUnit\",\"type\":\"string\"},{\"name\":\"handler\",\"type\":\"string\"},{\"name\":\"disposalUrl\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Tasks> ENCODER =
      new BinaryMessageEncoder<Tasks>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Tasks> DECODER =
      new BinaryMessageDecoder<Tasks>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Tasks> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Tasks> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Tasks>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Tasks to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Tasks from a ByteBuffer. */
  public static Tasks fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence taskId;
  @Deprecated public java.lang.CharSequence taskName;
  @Deprecated public java.lang.CharSequence taskFrom;
  @Deprecated public java.lang.CharSequence taskContent;
  @Deprecated public java.lang.CharSequence taskType;
  @Deprecated public java.lang.CharSequence status;
  @Deprecated public java.lang.CharSequence serviceState;
  @Deprecated public java.lang.CharSequence messageState;
  @Deprecated public java.lang.CharSequence time;
  @Deprecated public java.lang.CharSequence unit;
  @Deprecated public java.lang.CharSequence promoter;
  @Deprecated public java.lang.CharSequence handlerUnit;
  @Deprecated public java.lang.CharSequence handler;
  @Deprecated public java.lang.CharSequence disposalUrl;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Tasks() {}

  /**
   * All-args constructor.
   * @param taskId The new value for taskId
   * @param taskName The new value for taskName
   * @param taskFrom The new value for taskFrom
   * @param taskContent The new value for taskContent
   * @param taskType The new value for taskType
   * @param status The new value for status
   * @param serviceState The new value for serviceState
   * @param messageState The new value for messageState
   * @param time The new value for time
   * @param unit The new value for unit
   * @param promoter The new value for promoter
   * @param handlerUnit The new value for handlerUnit
   * @param handler The new value for handler
   * @param disposalUrl The new value for disposalUrl
   */
  public Tasks(java.lang.CharSequence taskId, java.lang.CharSequence taskName, java.lang.CharSequence taskFrom, java.lang.CharSequence taskContent, java.lang.CharSequence taskType, java.lang.CharSequence status, java.lang.CharSequence serviceState, java.lang.CharSequence messageState, java.lang.CharSequence time, java.lang.CharSequence unit, java.lang.CharSequence promoter, java.lang.CharSequence handlerUnit, java.lang.CharSequence handler, java.lang.CharSequence disposalUrl) {
    this.taskId = taskId;
    this.taskName = taskName;
    this.taskFrom = taskFrom;
    this.taskContent = taskContent;
    this.taskType = taskType;
    this.status = status;
    this.serviceState = serviceState;
    this.messageState = messageState;
    this.time = time;
    this.unit = unit;
    this.promoter = promoter;
    this.handlerUnit = handlerUnit;
    this.handler = handler;
    this.disposalUrl = disposalUrl;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return taskId;
    case 1: return taskName;
    case 2: return taskFrom;
    case 3: return taskContent;
    case 4: return taskType;
    case 5: return status;
    case 6: return serviceState;
    case 7: return messageState;
    case 8: return time;
    case 9: return unit;
    case 10: return promoter;
    case 11: return handlerUnit;
    case 12: return handler;
    case 13: return disposalUrl;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: taskId = (java.lang.CharSequence)value$; break;
    case 1: taskName = (java.lang.CharSequence)value$; break;
    case 2: taskFrom = (java.lang.CharSequence)value$; break;
    case 3: taskContent = (java.lang.CharSequence)value$; break;
    case 4: taskType = (java.lang.CharSequence)value$; break;
    case 5: status = (java.lang.CharSequence)value$; break;
    case 6: serviceState = (java.lang.CharSequence)value$; break;
    case 7: messageState = (java.lang.CharSequence)value$; break;
    case 8: time = (java.lang.CharSequence)value$; break;
    case 9: unit = (java.lang.CharSequence)value$; break;
    case 10: promoter = (java.lang.CharSequence)value$; break;
    case 11: handlerUnit = (java.lang.CharSequence)value$; break;
    case 12: handler = (java.lang.CharSequence)value$; break;
    case 13: disposalUrl = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'taskId' field.
   * @return The value of the 'taskId' field.
   */
  public java.lang.CharSequence getTaskId() {
    return taskId;
  }

  /**
   * Sets the value of the 'taskId' field.
   * @param value the value to set.
   */
  public void setTaskId(java.lang.CharSequence value) {
    this.taskId = value;
  }

  /**
   * Gets the value of the 'taskName' field.
   * @return The value of the 'taskName' field.
   */
  public java.lang.CharSequence getTaskName() {
    return taskName;
  }

  /**
   * Sets the value of the 'taskName' field.
   * @param value the value to set.
   */
  public void setTaskName(java.lang.CharSequence value) {
    this.taskName = value;
  }

  /**
   * Gets the value of the 'taskFrom' field.
   * @return The value of the 'taskFrom' field.
   */
  public java.lang.CharSequence getTaskFrom() {
    return taskFrom;
  }

  /**
   * Sets the value of the 'taskFrom' field.
   * @param value the value to set.
   */
  public void setTaskFrom(java.lang.CharSequence value) {
    this.taskFrom = value;
  }

  /**
   * Gets the value of the 'taskContent' field.
   * @return The value of the 'taskContent' field.
   */
  public java.lang.CharSequence getTaskContent() {
    return taskContent;
  }

  /**
   * Sets the value of the 'taskContent' field.
   * @param value the value to set.
   */
  public void setTaskContent(java.lang.CharSequence value) {
    this.taskContent = value;
  }

  /**
   * Gets the value of the 'taskType' field.
   * @return The value of the 'taskType' field.
   */
  public java.lang.CharSequence getTaskType() {
    return taskType;
  }

  /**
   * Sets the value of the 'taskType' field.
   * @param value the value to set.
   */
  public void setTaskType(java.lang.CharSequence value) {
    this.taskType = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'serviceState' field.
   * @return The value of the 'serviceState' field.
   */
  public java.lang.CharSequence getServiceState() {
    return serviceState;
  }

  /**
   * Sets the value of the 'serviceState' field.
   * @param value the value to set.
   */
  public void setServiceState(java.lang.CharSequence value) {
    this.serviceState = value;
  }

  /**
   * Gets the value of the 'messageState' field.
   * @return The value of the 'messageState' field.
   */
  public java.lang.CharSequence getMessageState() {
    return messageState;
  }

  /**
   * Sets the value of the 'messageState' field.
   * @param value the value to set.
   */
  public void setMessageState(java.lang.CharSequence value) {
    this.messageState = value;
  }

  /**
   * Gets the value of the 'time' field.
   * @return The value of the 'time' field.
   */
  public java.lang.CharSequence getTime() {
    return time;
  }

  /**
   * Sets the value of the 'time' field.
   * @param value the value to set.
   */
  public void setTime(java.lang.CharSequence value) {
    this.time = value;
  }

  /**
   * Gets the value of the 'unit' field.
   * @return The value of the 'unit' field.
   */
  public java.lang.CharSequence getUnit() {
    return unit;
  }

  /**
   * Sets the value of the 'unit' field.
   * @param value the value to set.
   */
  public void setUnit(java.lang.CharSequence value) {
    this.unit = value;
  }

  /**
   * Gets the value of the 'promoter' field.
   * @return The value of the 'promoter' field.
   */
  public java.lang.CharSequence getPromoter() {
    return promoter;
  }

  /**
   * Sets the value of the 'promoter' field.
   * @param value the value to set.
   */
  public void setPromoter(java.lang.CharSequence value) {
    this.promoter = value;
  }

  /**
   * Gets the value of the 'handlerUnit' field.
   * @return The value of the 'handlerUnit' field.
   */
  public java.lang.CharSequence getHandlerUnit() {
    return handlerUnit;
  }

  /**
   * Sets the value of the 'handlerUnit' field.
   * @param value the value to set.
   */
  public void setHandlerUnit(java.lang.CharSequence value) {
    this.handlerUnit = value;
  }

  /**
   * Gets the value of the 'handler' field.
   * @return The value of the 'handler' field.
   */
  public java.lang.CharSequence getHandler() {
    return handler;
  }

  /**
   * Sets the value of the 'handler' field.
   * @param value the value to set.
   */
  public void setHandler(java.lang.CharSequence value) {
    this.handler = value;
  }

  /**
   * Gets the value of the 'disposalUrl' field.
   * @return The value of the 'disposalUrl' field.
   */
  public java.lang.CharSequence getDisposalUrl() {
    return disposalUrl;
  }

  /**
   * Sets the value of the 'disposalUrl' field.
   * @param value the value to set.
   */
  public void setDisposalUrl(java.lang.CharSequence value) {
    this.disposalUrl = value;
  }

  /**
   * Creates a new Tasks RecordBuilder.
   * @return A new Tasks RecordBuilder
   */
  public static com.topsec.portal.kafkaspringboottest.Tasks.Builder newBuilder() {
    return new com.topsec.portal.kafkaspringboottest.Tasks.Builder();
  }

  /**
   * Creates a new Tasks RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Tasks RecordBuilder
   */
  public static com.topsec.portal.kafkaspringboottest.Tasks.Builder newBuilder(com.topsec.portal.kafkaspringboottest.Tasks.Builder other) {
    return new com.topsec.portal.kafkaspringboottest.Tasks.Builder(other);
  }

  /**
   * Creates a new Tasks RecordBuilder by copying an existing Tasks instance.
   * @param other The existing instance to copy.
   * @return A new Tasks RecordBuilder
   */
  public static com.topsec.portal.kafkaspringboottest.Tasks.Builder newBuilder(com.topsec.portal.kafkaspringboottest.Tasks other) {
    return new com.topsec.portal.kafkaspringboottest.Tasks.Builder(other);
  }

  /**
   * RecordBuilder for Tasks instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Tasks>
    implements org.apache.avro.data.RecordBuilder<Tasks> {

    private java.lang.CharSequence taskId;
    private java.lang.CharSequence taskName;
    private java.lang.CharSequence taskFrom;
    private java.lang.CharSequence taskContent;
    private java.lang.CharSequence taskType;
    private java.lang.CharSequence status;
    private java.lang.CharSequence serviceState;
    private java.lang.CharSequence messageState;
    private java.lang.CharSequence time;
    private java.lang.CharSequence unit;
    private java.lang.CharSequence promoter;
    private java.lang.CharSequence handlerUnit;
    private java.lang.CharSequence handler;
    private java.lang.CharSequence disposalUrl;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.topsec.portal.kafkaspringboottest.Tasks.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.taskId)) {
        this.taskId = data().deepCopy(fields()[0].schema(), other.taskId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.taskName)) {
        this.taskName = data().deepCopy(fields()[1].schema(), other.taskName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.taskFrom)) {
        this.taskFrom = data().deepCopy(fields()[2].schema(), other.taskFrom);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.taskContent)) {
        this.taskContent = data().deepCopy(fields()[3].schema(), other.taskContent);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.taskType)) {
        this.taskType = data().deepCopy(fields()[4].schema(), other.taskType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.serviceState)) {
        this.serviceState = data().deepCopy(fields()[6].schema(), other.serviceState);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.messageState)) {
        this.messageState = data().deepCopy(fields()[7].schema(), other.messageState);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.time)) {
        this.time = data().deepCopy(fields()[8].schema(), other.time);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.unit)) {
        this.unit = data().deepCopy(fields()[9].schema(), other.unit);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.promoter)) {
        this.promoter = data().deepCopy(fields()[10].schema(), other.promoter);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.handlerUnit)) {
        this.handlerUnit = data().deepCopy(fields()[11].schema(), other.handlerUnit);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.handler)) {
        this.handler = data().deepCopy(fields()[12].schema(), other.handler);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.disposalUrl)) {
        this.disposalUrl = data().deepCopy(fields()[13].schema(), other.disposalUrl);
        fieldSetFlags()[13] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Tasks instance
     * @param other The existing instance to copy.
     */
    private Builder(com.topsec.portal.kafkaspringboottest.Tasks other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.taskId)) {
        this.taskId = data().deepCopy(fields()[0].schema(), other.taskId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.taskName)) {
        this.taskName = data().deepCopy(fields()[1].schema(), other.taskName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.taskFrom)) {
        this.taskFrom = data().deepCopy(fields()[2].schema(), other.taskFrom);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.taskContent)) {
        this.taskContent = data().deepCopy(fields()[3].schema(), other.taskContent);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.taskType)) {
        this.taskType = data().deepCopy(fields()[4].schema(), other.taskType);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.status)) {
        this.status = data().deepCopy(fields()[5].schema(), other.status);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.serviceState)) {
        this.serviceState = data().deepCopy(fields()[6].schema(), other.serviceState);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.messageState)) {
        this.messageState = data().deepCopy(fields()[7].schema(), other.messageState);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.time)) {
        this.time = data().deepCopy(fields()[8].schema(), other.time);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.unit)) {
        this.unit = data().deepCopy(fields()[9].schema(), other.unit);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.promoter)) {
        this.promoter = data().deepCopy(fields()[10].schema(), other.promoter);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.handlerUnit)) {
        this.handlerUnit = data().deepCopy(fields()[11].schema(), other.handlerUnit);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.handler)) {
        this.handler = data().deepCopy(fields()[12].schema(), other.handler);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.disposalUrl)) {
        this.disposalUrl = data().deepCopy(fields()[13].schema(), other.disposalUrl);
        fieldSetFlags()[13] = true;
      }
    }

    /**
      * Gets the value of the 'taskId' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaskId() {
      return taskId;
    }

    /**
      * Sets the value of the 'taskId' field.
      * @param value The value of 'taskId'.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder setTaskId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.taskId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'taskId' field has been set.
      * @return True if the 'taskId' field has been set, false otherwise.
      */
    public boolean hasTaskId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'taskId' field.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder clearTaskId() {
      taskId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'taskName' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaskName() {
      return taskName;
    }

    /**
      * Sets the value of the 'taskName' field.
      * @param value The value of 'taskName'.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder setTaskName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.taskName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'taskName' field has been set.
      * @return True if the 'taskName' field has been set, false otherwise.
      */
    public boolean hasTaskName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'taskName' field.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder clearTaskName() {
      taskName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'taskFrom' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaskFrom() {
      return taskFrom;
    }

    /**
      * Sets the value of the 'taskFrom' field.
      * @param value The value of 'taskFrom'.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder setTaskFrom(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.taskFrom = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'taskFrom' field has been set.
      * @return True if the 'taskFrom' field has been set, false otherwise.
      */
    public boolean hasTaskFrom() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'taskFrom' field.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder clearTaskFrom() {
      taskFrom = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'taskContent' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaskContent() {
      return taskContent;
    }

    /**
      * Sets the value of the 'taskContent' field.
      * @param value The value of 'taskContent'.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder setTaskContent(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.taskContent = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'taskContent' field has been set.
      * @return True if the 'taskContent' field has been set, false otherwise.
      */
    public boolean hasTaskContent() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'taskContent' field.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder clearTaskContent() {
      taskContent = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'taskType' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaskType() {
      return taskType;
    }

    /**
      * Sets the value of the 'taskType' field.
      * @param value The value of 'taskType'.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder setTaskType(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.taskType = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'taskType' field has been set.
      * @return True if the 'taskType' field has been set, false otherwise.
      */
    public boolean hasTaskType() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'taskType' field.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder clearTaskType() {
      taskType = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.status = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder clearStatus() {
      status = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'serviceState' field.
      * @return The value.
      */
    public java.lang.CharSequence getServiceState() {
      return serviceState;
    }

    /**
      * Sets the value of the 'serviceState' field.
      * @param value The value of 'serviceState'.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder setServiceState(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.serviceState = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceState' field has been set.
      * @return True if the 'serviceState' field has been set, false otherwise.
      */
    public boolean hasServiceState() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'serviceState' field.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder clearServiceState() {
      serviceState = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'messageState' field.
      * @return The value.
      */
    public java.lang.CharSequence getMessageState() {
      return messageState;
    }

    /**
      * Sets the value of the 'messageState' field.
      * @param value The value of 'messageState'.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder setMessageState(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.messageState = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'messageState' field has been set.
      * @return True if the 'messageState' field has been set, false otherwise.
      */
    public boolean hasMessageState() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'messageState' field.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder clearMessageState() {
      messageState = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'time' field.
      * @return The value.
      */
    public java.lang.CharSequence getTime() {
      return time;
    }

    /**
      * Sets the value of the 'time' field.
      * @param value The value of 'time'.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder setTime(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.time = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'time' field has been set.
      * @return True if the 'time' field has been set, false otherwise.
      */
    public boolean hasTime() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'time' field.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder clearTime() {
      time = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'unit' field.
      * @return The value.
      */
    public java.lang.CharSequence getUnit() {
      return unit;
    }

    /**
      * Sets the value of the 'unit' field.
      * @param value The value of 'unit'.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder setUnit(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.unit = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'unit' field has been set.
      * @return True if the 'unit' field has been set, false otherwise.
      */
    public boolean hasUnit() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'unit' field.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder clearUnit() {
      unit = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'promoter' field.
      * @return The value.
      */
    public java.lang.CharSequence getPromoter() {
      return promoter;
    }

    /**
      * Sets the value of the 'promoter' field.
      * @param value The value of 'promoter'.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder setPromoter(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.promoter = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'promoter' field has been set.
      * @return True if the 'promoter' field has been set, false otherwise.
      */
    public boolean hasPromoter() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'promoter' field.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder clearPromoter() {
      promoter = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'handlerUnit' field.
      * @return The value.
      */
    public java.lang.CharSequence getHandlerUnit() {
      return handlerUnit;
    }

    /**
      * Sets the value of the 'handlerUnit' field.
      * @param value The value of 'handlerUnit'.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder setHandlerUnit(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.handlerUnit = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'handlerUnit' field has been set.
      * @return True if the 'handlerUnit' field has been set, false otherwise.
      */
    public boolean hasHandlerUnit() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'handlerUnit' field.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder clearHandlerUnit() {
      handlerUnit = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'handler' field.
      * @return The value.
      */
    public java.lang.CharSequence getHandler() {
      return handler;
    }

    /**
      * Sets the value of the 'handler' field.
      * @param value The value of 'handler'.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder setHandler(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.handler = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'handler' field has been set.
      * @return True if the 'handler' field has been set, false otherwise.
      */
    public boolean hasHandler() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'handler' field.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder clearHandler() {
      handler = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'disposalUrl' field.
      * @return The value.
      */
    public java.lang.CharSequence getDisposalUrl() {
      return disposalUrl;
    }

    /**
      * Sets the value of the 'disposalUrl' field.
      * @param value The value of 'disposalUrl'.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder setDisposalUrl(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.disposalUrl = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'disposalUrl' field has been set.
      * @return True if the 'disposalUrl' field has been set, false otherwise.
      */
    public boolean hasDisposalUrl() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'disposalUrl' field.
      * @return This builder.
      */
    public com.topsec.portal.kafkaspringboottest.Tasks.Builder clearDisposalUrl() {
      disposalUrl = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Tasks build() {
      try {
        Tasks record = new Tasks();
        record.taskId = fieldSetFlags()[0] ? this.taskId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.taskName = fieldSetFlags()[1] ? this.taskName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.taskFrom = fieldSetFlags()[2] ? this.taskFrom : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.taskContent = fieldSetFlags()[3] ? this.taskContent : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.taskType = fieldSetFlags()[4] ? this.taskType : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.status = fieldSetFlags()[5] ? this.status : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.serviceState = fieldSetFlags()[6] ? this.serviceState : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.messageState = fieldSetFlags()[7] ? this.messageState : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.time = fieldSetFlags()[8] ? this.time : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.unit = fieldSetFlags()[9] ? this.unit : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.promoter = fieldSetFlags()[10] ? this.promoter : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.handlerUnit = fieldSetFlags()[11] ? this.handlerUnit : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.handler = fieldSetFlags()[12] ? this.handler : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.disposalUrl = fieldSetFlags()[13] ? this.disposalUrl : (java.lang.CharSequence) defaultValue(fields()[13]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Tasks>
    WRITER$ = (org.apache.avro.io.DatumWriter<Tasks>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Tasks>
    READER$ = (org.apache.avro.io.DatumReader<Tasks>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
